/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF, useAnimations, RenderTexture } from "@react-three/drei";
//@ts-ignore
import { GLTF } from "three-stdlib";
import { Suspense, useEffect, useMemo, useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { SpringRef, SpringValue, useSpring } from "@react-spring/three";
import { InnerScreen } from "./inner-screen.js";
import { OuterScreen } from "./outer-screen.js";
import { Signal } from "@preact/signals";
import { EventHandlers } from "@react-three/fiber/dist/declarations/src/core/events.js";
import { clamp } from "three/src/math/MathUtils.js";

type GLTFResult = GLTF & {
  nodes: {
    upper: THREE.Mesh;
    Camera_CameraBlackMatte_0: THREE.Mesh;
    Camera_CameraGlass_0: THREE.Mesh;
    Camera_CameraGrayMatte_0: THREE.Mesh;
    Camera_CameraLens_0: THREE.Mesh;
    Camera_CameraMetal_0: THREE.Mesh;
    Camera_CameraMetalGray_0: THREE.Mesh;
    Plane: THREE.Mesh;
    Z_Flip_3_back_0: THREE.Mesh;
    Z_Flip_3_cameraBack_0: THREE.Mesh;
    Z_Flip_3_CameraGlass_0: THREE.Mesh;
    Z_Flip_3_CameraGrayMatte_0: THREE.Mesh;
    Z_Flip_3_CameraLens_0: THREE.Mesh;
    Z_Flip_3_Flash_0: THREE.Mesh;
    Z_Flip_3_Glass_0: THREE.Mesh;
    Z_Flip_3_Line_0: THREE.Mesh;
    Z_Flip_3_Plastic_0: THREE.Mesh;
    Z_Flip_3_Screen_0: THREE.Mesh;
    Z_Flip_3_SpeakerMic_0: THREE.Mesh;
    lower: THREE.Mesh;
    Z_Flip_3_back_0001: THREE.Mesh;
    Z_Flip_3_Line_0001: THREE.Mesh;
    Z_Flip_3_Plastic_0001: THREE.Mesh;
    Z_Flip_3_PortBlack_0: THREE.Mesh;
    Z_Flip_3_PortYellow_0: THREE.Mesh;
    Z_Flip_3_Screen_0001: THREE.Mesh;
    Z_Flip_3_SpeakerMic_0001: THREE.Mesh;
    hinge: THREE.Mesh;
  };
  materials: {
    metal: THREE.MeshStandardMaterial;
    CameraBlackMatte: THREE.MeshStandardMaterial;
    CameraGlass: THREE.MeshStandardMaterial;
    CameraGrayMatte: THREE.MeshStandardMaterial;
    CameraLens: THREE.MeshStandardMaterial;
    CameraMetal: THREE.MeshStandardMaterial;
    CameraMetalGray: THREE.MeshStandardMaterial;
    ["outer-screen"]: THREE.MeshStandardMaterial;
    back: THREE.MeshStandardMaterial;
    cameraBack: THREE.MeshStandardMaterial;
    Flash: THREE.MeshStandardMaterial;
    Glass: THREE.MeshStandardMaterial;
    Line: THREE.MeshStandardMaterial;
    Plastic: THREE.MeshStandardMaterial;
    ["inner-screen"]: THREE.MeshStandardMaterial;
    SpeakerMic: THREE.MeshStandardMaterial;
    PortBlack: THREE.MeshStandardMaterial;
    PortYellow: THREE.MeshStandardMaterial;
  };
};

type ActionName =
  | "Z Flip 3_metal_0Action"
  | "Z Flip 3_metal_0.001Action"
  | "CubeAction";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Model(
  props: JSX.IntrinsicElements["group"] & {
    animationProgress: SpringValue<number>;
  }
) {
  const [{ page }, api] = useSpring({ page: 0 }, []);
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF("/phone.glb") as GLTFResult;
  const { actions, mixer } = useAnimations<any>(animations, group);
  const innerTextureRef = useRef<THREE.Texture>(null);
  const outerTextureRef = useRef<THREE.Texture>(null);
  useEffect(() => {
    for (const key in actions) {
      const action = actions[key];
      action?.play();
    }
    materials["inner-screen"].envMapIntensity = 0.8;
    materials["inner-screen"].metalness = 0.5;
    materials["inner-screen"].roughness = 0.05;
    materials["outer-screen"].envMapIntensity = 0.8;
    materials["outer-screen"].metalness = 0.5;
    materials["outer-screen"].roughness = 0.05;
    materials["inner-screen"].map = innerTextureRef.current!;
    materials["outer-screen"].map = outerTextureRef.current!;
  }, []);
  useFrame(() => {
    for (const key in actions) {
      const action = actions[key];
      if (action == null) {
        continue;
      }
      action.time = props.animationProgress.get() * action.getClip().duration;
    }
    mixer.update(0);
  });
  const initialPoint = useRef<THREE.Vector3 | undefined>(undefined);
  const initialPage = useRef<number>(0);
  const handler = useMemo<EventHandlers>(() => {
    const onLeaveOrUp = () => {
      if (initialPage.current == null) {
        return;
      }
      initialPoint.current = undefined;
      initialPoint.current = undefined;
      api.start({
        to: {
          page: clamp(Math.round(page.get()), 0, 1),
        },
      });
    };
    return {
      onClick(e) {
        e.stopPropagation();
      },
      onPointerDown(event) {
        initialPoint.current = event.point;
        initialPage.current = page.get();
      },
      onPointerMove(event) {
        event.stopPropagation()
        if (initialPoint.current == null || initialPage.current == null) {
          return;
        }
        const newPage = clamp(
          initialPage.current +
            (initialPoint.current.x - event.point.x) / 0.356025,
          0,
          1
        );
        api.set({
          page: newPage,
        });
      },
      onPointerUp: onLeaveOrUp,
      onPointerLeave: onLeaveOrUp,
    };
  }, []);

  const video = useMemo(() => document.createElement("video"), []);
  return (
    <>
      <RenderTexture ref={innerTextureRef}>
        <Suspense>
          <InnerScreen page={page} />
        </Suspense>
      </RenderTexture>
      <RenderTexture ref={outerTextureRef}>
        <Suspense>
          <OuterScreen video={video} />
        </Suspense>
      </RenderTexture>
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <mesh
            name="upper"
            castShadow
            receiveShadow
            geometry={nodes.upper.geometry}
            material={materials.metal}
          >
            <mesh
              name="Camera_CameraBlackMatte_0"
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraBlackMatte_0.geometry}
              material={materials.CameraBlackMatte}
            />
            <mesh
              name="Camera_CameraGlass_0"
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraGlass_0.geometry}
              material={materials.CameraGlass}
            />
            <mesh
              name="Camera_CameraGrayMatte_0"
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraGrayMatte_0.geometry}
              material={materials.CameraGrayMatte}
            />
            <mesh
              name="Camera_CameraLens_0"
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraLens_0.geometry}
              material={materials.CameraLens}
            />
            <mesh
              name="Camera_CameraMetal_0"
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraMetal_0.geometry}
              material={materials.CameraMetal}
            />
            <mesh
              name="Camera_CameraMetalGray_0"
              castShadow
              receiveShadow
              geometry={nodes.Camera_CameraMetalGray_0.geometry}
              material={materials.CameraMetalGray}
            />
            <mesh
              name="Plane"
              castShadow
              receiveShadow
              geometry={nodes.Plane.geometry}
              material={materials["outer-screen"]}
              position={[-0.041, 0.356, -0.033]}
              rotation={[Math.PI / 2, 0, -Math.PI]}
              scale={[0.12, 0.117, 0.065]}
              onClick={(e) => {
                console.log(e);
                e.stopPropagation();
                if (
                  video.srcObject != null &&
                  (video.srcObject as MediaStream).active
                ) {
                  (video.srcObject as MediaStream)
                    .getTracks()
                    .forEach((track) => track.stop());
                  return;
                }
                navigator.mediaDevices
                  .getUserMedia({ video: true })
                  .then((stream) => {
                    if (
                      video.srcObject != null &&
                      (video.srcObject as MediaStream).active
                    ) {
                      return;
                    }
                    video.srcObject = stream;
                    video.play();
                  });
              }}
            />
            <mesh
              name="Z_Flip_3_back_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_back_0.geometry}
              material={materials.back}
            />
            <mesh
              name="Z_Flip_3_cameraBack_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_cameraBack_0.geometry}
              material={materials.cameraBack}
            />
            <mesh
              name="Z_Flip_3_CameraGlass_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_CameraGlass_0.geometry}
              material={materials.CameraGlass}
            />
            <mesh
              name="Z_Flip_3_CameraGrayMatte_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_CameraGrayMatte_0.geometry}
              material={materials.CameraGrayMatte}
            />
            <mesh
              name="Z_Flip_3_CameraLens_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_CameraLens_0.geometry}
              material={materials.CameraLens}
            />
            <mesh
              name="Z_Flip_3_Flash_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Flash_0.geometry}
              material={materials.Flash}
            />
            <mesh
              name="Z_Flip_3_Glass_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Glass_0.geometry}
              material={materials.Glass}
            />
            <mesh
              name="Z_Flip_3_Line_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Line_0.geometry}
              material={materials.Line}
            />
            <mesh
              name="Z_Flip_3_Plastic_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Plastic_0.geometry}
              material={materials.Plastic}
            />
            <mesh
              name="Z_Flip_3_Screen_0"
              castShadow
              {...handler}
              receiveShadow
              geometry={nodes.Z_Flip_3_Screen_0.geometry}
              material={materials["inner-screen"]}
            />
            <mesh
              name="Z_Flip_3_SpeakerMic_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_SpeakerMic_0.geometry}
              material={materials.SpeakerMic}
            />
          </mesh>
          <mesh
            name="lower"
            castShadow
            receiveShadow
            geometry={nodes.lower.geometry}
            material={materials.metal}
          >
            <mesh
              name="Z_Flip_3_back_0001"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_back_0001.geometry}
              material={materials.back}
            />
            <mesh
              name="Z_Flip_3_Line_0001"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Line_0001.geometry}
              material={materials.Line}
            />
            <mesh
              name="Z_Flip_3_Plastic_0001"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_Plastic_0001.geometry}
              material={materials.Plastic}
            />
            <mesh
              name="Z_Flip_3_PortBlack_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_PortBlack_0.geometry}
              material={materials.PortBlack}
            />
            <mesh
              name="Z_Flip_3_PortYellow_0"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_PortYellow_0.geometry}
              material={materials.PortYellow}
            />
            <mesh
              name="Z_Flip_3_Screen_0001"
              castShadow
              {...handler}
              receiveShadow
              geometry={nodes.Z_Flip_3_Screen_0001.geometry}
              material={materials["inner-screen"]}
            />
            <mesh
              name="Z_Flip_3_SpeakerMic_0001"
              castShadow
              receiveShadow
              geometry={nodes.Z_Flip_3_SpeakerMic_0001.geometry}
              material={materials.SpeakerMic}
            />
          </mesh>
          <mesh
            name="hinge"
            castShadow
            receiveShadow
            geometry={nodes.hinge.geometry}
            material={materials.metal}
            position={[-0.002, 0, -0.018]}
            rotation={[-Math.PI, 0, 0]}
            scale={[-0.183, -0.029, -0.007]}
          />
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/phone.glb");
